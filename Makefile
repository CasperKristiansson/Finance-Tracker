.PHONY: tf-init tf-plan tf-apply tf-destroy tf-fmt tf-validate tf-write-web-env \
        tf-enable-bastion tf-disable-bastion bastion-copy bastion-shell \
        type-check format test deploy-layer deploy-api deploy

TF_DIR ?= infra/terraform
TF_CMD = terraform -chdir=$(TF_DIR)
AWS_PROFILE ?= Personal
AWS_REGION  ?= eu-north-1
PYTHON ?= python3

# Terraform helpers

tf-init:
	$(TF_CMD) init

tf-plan:
	$(TF_CMD) plan

tf-apply:
	$(TF_CMD) apply
	$(MAKE) tf-write-web-env

tf-destroy:
	$(TF_CMD) destroy

tf-fmt:
	$(TF_CMD) fmt -recursive

tf-validate:
	$(TF_CMD) validate

tf-write-web-env:
	@TF_DIR=$(TF_DIR) AWS_REGION=$(AWS_REGION) AWS_PROFILE=$(AWS_PROFILE) $(PYTHON) - <<'PY'
import json
import os
import pathlib
import subprocess

tf_dir = os.environ.get("TF_DIR", "infra/terraform")
tf_cmd = ["terraform", f"-chdir={tf_dir}", "output", "-json", "auth_parameter_paths"]
tf_proc = subprocess.run(tf_cmd, check=True, capture_output=True, text=True)
auth_output = json.loads(tf_proc.stdout)
auth_paths = auth_output.get("value") if isinstance(auth_output, dict) else None

if not auth_paths:
    raise SystemExit("Terraform output `auth_parameter_paths` did not return any values.")

try:
    user_pool_id_param = auth_paths["user_pool_id"]
    user_pool_client_param = auth_paths["user_pool_client"]
except KeyError as exc:
    raise SystemExit(
        "Expected Cognito parameter names from Terraform output `auth_parameter_paths`."
    ) from exc

region = os.environ.get("AWS_REGION", "eu-north-1")
profile = os.environ.get("AWS_PROFILE", "")

def read_parameter(name: str) -> str:
    cmd = [
        "aws",
        "ssm",
        "get-parameter",
        "--name",
        name,
        "--with-decryption",
        "--query",
        "Parameter.Value",
        "--output",
        "text",
        "--region",
        region,
    ]
    if profile:
        cmd.extend(["--profile", profile])
    proc = subprocess.run(cmd, check=True, capture_output=True, text=True)
    return proc.stdout.strip()

env_path = pathlib.Path("apps/web/.env")
env_path.parent.mkdir(parents=True, exist_ok=True)

values = {
    "VITE_AWS_REGION": region,
    "VITE_USER_POOL_ID": read_parameter(user_pool_id_param),
    "VITE_USER_POOL_CLIENT_ID": read_parameter(user_pool_client_param),
}

with env_path.open("w", encoding="utf-8") as env_file:
    env_file.write("# Auto-generated by `make tf-write-web-env`\n")
    for key, value in values.items():
        env_file.write(f"{key}={value}\n")

print(f"Updated {env_path} with Cognito configuration.")
PY

# Toggle bastion host provisioning

tf-enable-bastion:
	$(TF_CMD) apply -var 'enable_bastion=true'

tf-disable-bastion:
	$(TF_CMD) apply -var 'enable_bastion=false'

bastion-copy:
	@test -n "$(FILE)" || { echo "Usage: make bastion-copy FILE=path [REMOTE=/remote/dir]"; exit 1; }
	REMOTE_DIR=$${REMOTE:-/home/ec2-user}; \
	$(PYTHON) scripts/bastion_copy.py "$(FILE)" --remote-dir "$$REMOTE_DIR" --tf-dir "$(TF_DIR)" --profile "$(AWS_PROFILE)" --region "$(AWS_REGION)"

bastion-shell:
	$(PYTHON) scripts/bastion_shell.py --tf-dir "$(TF_DIR)" --profile "$(AWS_PROFILE)" --region "$(AWS_REGION)"

# Quality gates

type-check:
	black --check .
	isort --check-only .
	PYTHONPATH=. pylint apps/api
	pyright
	mypy apps/api

format:
	isort .
	black .

test:
	pytest apps/api/tests

deploy-layer:
	$(MAKE) -C infra/layers build
	cd infra/layers && npx serverless deploy

deploy-api:
	cd infra/serverless && npx serverless deploy

deploy: deploy-layer deploy-api
