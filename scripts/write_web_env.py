#!/usr/bin/env python3
"""Populate the web app .env file with Cognito outputs from Terraform."""
from __future__ import annotations

import argparse
import json
import subprocess
from pathlib import Path
from typing import Any, Dict


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--tf-dir",
        default="infra/terraform",
        help="Terraform working directory (defaults to infra/terraform)",
    )
    parser.add_argument(
        "--env-path",
        default="apps/web/.env",
        help="Path to the env file that should be updated",
    )
    parser.add_argument(
        "--aws-region",
        default="eu-north-1",
        help="AWS region used to resolve SSM parameters",
    )
    parser.add_argument(
        "--aws-profile",
        default="",
        help="Optional AWS CLI profile for the terraform outputs and SSM queries",
    )
    return parser.parse_args()


def run_subprocess(command: list[str]) -> subprocess.CompletedProcess[str]:
    return subprocess.run(command, check=True, capture_output=True, text=True)


def read_auth_parameter_paths(tf_dir: str, profile: str) -> Dict[str, str]:
    command = ["terraform", f"-chdir={tf_dir}", "output", "-json", "auth_parameter_paths"]
    result = run_subprocess(command)

    output: Any = json.loads(result.stdout)
    if isinstance(output, dict):
        value = output.get("value", output)
    else:
        value = output

    if not isinstance(value, dict):
        raise RuntimeError("Unexpected terraform output for `auth_parameter_paths`.")

    expected_keys = {"user_pool_id", "user_pool_client"}
    missing = expected_keys.difference(value.keys())
    if missing:
        raise RuntimeError(
            "Terraform output `auth_parameter_paths` missing keys: " + ", ".join(sorted(missing))
        )

    return {key: str(value[key]) for key in expected_keys}


def read_parameter(name: str, region: str, profile: str) -> str:
    command = [
        "aws",
        "ssm",
        "get-parameter",
        "--name",
        name,
        "--with-decryption",
        "--query",
        "Parameter.Value",
        "--output",
        "text",
        "--region",
        region,
    ]
    if profile:
        command.extend(["--profile", profile])
    result = run_subprocess(command)
    return result.stdout.strip()


def write_env_file(env_path: Path, region: str, user_pool_id: str, user_pool_client_id: str) -> None:
    env_path.parent.mkdir(parents=True, exist_ok=True)
    content = (
        "# Auto-generated by script. Do not edit manually.\n"
        f"VITE_AWS_REGION={region}\n"
        f"VITE_USER_POOL_ID={user_pool_id}\n"
        f"VITE_USER_POOL_CLIENT_ID={user_pool_client_id}\n"
    )
    env_path.write_text(content, encoding="utf-8")


def main() -> None:
    args = parse_args()

    auth_paths = read_auth_parameter_paths(args.tf_dir, args.aws_profile)

    user_pool_id = read_parameter(auth_paths["user_pool_id"], args.aws_region, args.aws_profile)
    user_pool_client_id = read_parameter(
        auth_paths["user_pool_client"], args.aws_region, args.aws_profile
    )

    env_path = Path(args.env_path)
    write_env_file(env_path, args.aws_region, user_pool_id, user_pool_client_id)

    print(f"Updated {env_path} with Cognito configuration.")

if __name__ == "__main__":
    main()
